import asyncio
import random
from sqlalchemy import create_engine, Column, Integer
from sqlalchemy.orm import declarative_base
from sqlalchemy.orm import sessionmaker
from aiogram import Bot, Dispatcher, types
from aiogram.utils import exceptions, executor

# –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
API_TOKEN = ''

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# —Ä–∞–∑–º–µ—Ä—ã –ø–æ–ª—è
FIELD_WIDTH = 30
FIELD_HEIGHT = 4

# create engine and session
engine = create_engine('sqlite:///game.db')
Session = sessionmaker(bind=engine)
session = Session()

# create base class
Base = declarative_base()


# create user table
class User(Base):
    __tablename__ = 'user'
    id = Column(Integer, primary_key=True)
    dino_x = Column(Integer)
    dino_y = Column(Integer)
    jumping = Column(Integer)
    seconds = Column(Integer)
    bad_cord = Column(Integer)
    bad_cord2 = Column(Integer)
    score = Column(Integer)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user_id = message.from_user.id
    user = session.query(User).filter_by(id=user_id).first()
    if not user:
        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user = User(id=user_id, dino_x=0, dino_y=FIELD_HEIGHT - 1,
                    jumping=False, seconds=-1,
                    bad_cord=random.randint(10, 16),
                    bad_cord2=random.randint(19, 26), score=0)
        session.add(user)
        session.commit()
    dino_x = user.dino_x
    dino_y = user.dino_y
    jumping = user.jumping
    seconds = user.seconds
    bad_cords = user.bad_cord, user.bad_cord2
    score = user.score

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ–π
    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.add(
        types.InlineKeyboardButton(text='Jump', callback_data='jump'))
    map = ''
    for y in range(FIELD_HEIGHT):
        for x in range(FIELD_WIDTH):
            if x == dino_x and y == dino_y:
                map += 'ü¶ñ'
            elif x in bad_cords and y == FIELD_HEIGHT - 1:
                map += '#'
            else:
                map += '. '
        map += '\n'
    sent_message = await message.answer(map, reply_markup=inline_keyboard)
    # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º chat_id –∏ message_id

    # –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    await asyncio.sleep(1)
    asyncio.ensure_future(update_message(chat_id=sent_message.chat.id,
                                         message_id=sent_message.message_id))


# —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –ø–æ–ª–µ –∏ –¥–∏–Ω–æ–∑–∞–≤—Ä–∏–∫–∞
async def update_message(chat_id, message_id):
    while True:
        # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user_id = chat_id
        user = session.query(User).filter_by(id=user_id).first()
        dino_x = user.dino_x
        dino_y = user.dino_y
        jumping = user.jumping
        seconds = user.seconds
        bad_cords = user.bad_cord, user.bad_cord2
        score = user.score

        # —Å–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É
        map = ''
        for y in range(FIELD_HEIGHT):
            for x in range(FIELD_WIDTH):
                if x == dino_x and y == dino_y:
                    map += 'ü¶ñ'
                elif x in bad_cords and y == FIELD_HEIGHT - 1:
                    map += '#'
                else:
                    map += '. '
            map += '\n'
        try:
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ–π
            inline_keyboard = types.InlineKeyboardMarkup()
            inline_keyboard.add(
                types.InlineKeyboardButton(text='Jump', callback_data='jump'))
            await bot.edit_message_text(chat_id=chat_id,
                                        message_id=message_id, text=map,
                                        reply_markup=inline_keyboard)
        except exceptions.MessageNotModified:
            pass
        # –ø–µ—Ä–µ–º–µ—â–∞–µ–º –¥–∏–Ω–æ–∑–∞–≤—Ä–∏–∫–∞
        if jumping and seconds > 0:
            jumping = False
        if jumping:
            # –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ "Jump" –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞, –ø–µ—Ä–µ–º–µ—â–∞–µ–º –¥–∏–Ω–æ–∑–∞–≤—Ä–∏–∫–∞ –≤–≤–µ—Ä—Ö –Ω–∞ 1 –∫–ª–µ—Ç–∫—É
            dino_y -= 1
            # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä—ã–∂–∫–∞
            jumping = False
            seconds = 4
        if seconds == 0:
            dino_y += 1
            seconds = -1
        elif seconds > 0:
            seconds -= 1
        if dino_y == FIELD_HEIGHT - 1 and dino_x in bad_cords:
            await bot.send_message(chat_id=chat_id, text='Game over')
            await bot.send_message(chat_id=chat_id,
                                   text=f"Your score: {dino_x + score}")
            # –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            user.dino_x = 0
            user.dino_y = FIELD_HEIGHT - 1
            user.jumping = False
            user.seconds = -1
            user.bad_cord = random.randint(10, 16)
            user.bad_cord2 = random.randint(19, 26)
            user.score = 0
            session.commit()
            return
        dino_x += 1
        if dino_x >= FIELD_WIDTH:
            score += dino_x
            dino_x = 0
            bad_cords = random.randint(6, 12), random.randint(16, 25)
        # –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user.dino_x = dino_x
        user.dino_y = dino_y
        user.jumping = jumping
        user.seconds = seconds
        user.bad_cord = bad_cords[0]
        user.bad_cord2 = bad_cords[1]
        user.score = score
        session.commit()
        # –∂–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É
        await asyncio.sleep(0.4)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "Jump"
@dp.callback_query_handler(text='jump')
async def jump_handler(message: types.Message):
    # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_id = message.from_user.id
    user = session.query(User).filter_by(id=user_id).first()
    # –º–µ–Ω—è–µ–º —Ñ–ª–∞–≥ –ø—Ä—ã–∂–∫–∞
    user.jumping = True
    session.commit()


# –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
